Generating Access Token:

Endpoint: https://ims-na1.adobelogin.com/ims/exchange/jwt
Method: POST
Payload (Pass following URL-encoded parameters in the body):

{
  "client_id": "YOUR_CLIENT_ID",
  "client_secret": "YOUR_CLIENT_SECRET",
  "jwt_token": "YOUR_JWT_TOKEN"
}

Other details/Dependencies: 

ORGANIZATION_ID: To be exported in code fresh workspace
TECHNICAL_ACCOUNT_ID: To be exported in code fresh workspace
CLIENT_ID: To be exported in code fresh workspace
CLIENT_SECRET: To be exported in code fresh workspace
CM_PRIVATE_KEY: To be exported in code fresh workspace
YOUR_JWT_TOKEN: Will be autogenerated using CLIENT_ID and CLIENT_SECRET using script.

Expected HTTP Response:
2xx RC with following json object.
{
  "token_type": "bearer",
  "access_token": "{ACCESS_TOKEN}",
  "expires_in": "{EXPIRATION_TIME}"
}


Reference(s): 
https://developer.adobe.com/developer-console/docs/guides/authentication/JWT/#creating-a-json-web-token
https://experienceleague.adobe.com/docs/experience-platform/landing/platform-apis/api-authentication.html

Creating a Package:

Endpoint: {source_aem_instance}/crx/packmgr/service/.json/etc/packages/{group_name}/{package_name}.zip
Method: POST
Headers:
{
  "Authorization": f"Bearer {access_token}",
  "Content-Type": "application/x-www-form-urlencoded"
}

Query parameters:
{
  "cmd": "create"
}

Expected HTTP response:
2xx RC with json object containing package details.

Payload:
{
  "groupName": "my_packages",
  "packageName": "package_name",
  "version": "1.0",
  "paths": ["/content/sample", "/conf/sample", "/etc/designs/sample"]
}

Reference(s):
https://experienceleague.adobe.com/docs/experience-manager-65/administering/operations/curl.html?lang=en

Updating package filters (specify JCR paths to package)

Endpoint: {source_aem_instance}/crx/packmgr/update.jsp
Method: POST
Headers:
{
  "Authorization": f"Bearer {access_token}",
  "Content-Type": "application/x-www-form-urlencoded"
}

Payload (Pass following URL-encoded parameters in the body):

{
  "path": {PACKAGE_PATH},
  "packageName": {PACKAGE_NAME},  
  "groupName": {GROUP_NAME},
  "filter": {FILTERS},
  "_charset_": "UTF-8"
}

PACKAGE_PATH represents the path where the package is created.
# Example: /etc/packages/{group_name}/{package_name}.zip

FILTERS represents the a list of objects containing JCR paths. 
# Example list:

[
    {
        "root": "/content/siteA"
    },
    {
        "root": "/conf/myconfig"
    },
    {
        "root": "/etc/designs/mydesign"
    }
]

Other details/Dependencies: 
The build trigger in code fresh shall use a variable called 'CONTENT_PATHS' to acceot a string with list of comma separated paths.
Example: "/content/siteA,/conf/myconfig,/etc/designs/mydesign". The script shall read this input to construct list of objects containing JCR paths and use it request body.

Reference(s):
https://experienceleague.adobe.com/docs/experience-manager-65/administering/operations/curl.html?lang=en
https://experienceleague.adobe.com/docs/experience-manager-cloud-manager/content/using/content-copy.html?lang=en#:~:text=to%20copy%20content.-,Log%20into%20Cloud%20Manager%20at%20my.cloudmanager.adobe.com,Content%20from%20the%20ellipsis%20menu.

Building a package:
Endpoint: {source_aem_instance}/crx/packmgr/service/.json/etc/packages/{GROUP_NAME}/{PACKAGE_NAME}.zip
Method: POST
Headers:
{
  "Authorization": f"Bearer {access_token}"
}

Query parameters:
{
  "cmd": "build"
}

Expected HTTP response:
2xx RC with json object containing package details.

Downloading built package:
Endpoint: {source_aem_instance}/crx/packmgr/service/.json/etc/packages/{GROUP_NAME}/{PACKAGE_NAME}.zip
Method: GET
Headers:
{
  "Authorization": f"Bearer {access_token}"
}

Expected HTTP response:
2xx RC with byte content for package.zip in response body.
